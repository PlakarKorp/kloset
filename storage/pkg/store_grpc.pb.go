// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.24.4
// source: store.proto

package store

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Store_Create_FullMethodName          = "/store.Store/Create"
	Store_Open_FullMethodName            = "/store.Store/Open"
	Store_Close_FullMethodName           = "/store.Store/Close"
	Store_GetLocation_FullMethodName     = "/store.Store/GetLocation"
	Store_GetMode_FullMethodName         = "/store.Store/GetMode"
	Store_GetSize_FullMethodName         = "/store.Store/GetSize"
	Store_GetStates_FullMethodName       = "/store.Store/GetStates"
	Store_PutState_FullMethodName        = "/store.Store/PutState"
	Store_GetState_FullMethodName        = "/store.Store/GetState"
	Store_DeleteState_FullMethodName     = "/store.Store/DeleteState"
	Store_GetPackfiles_FullMethodName    = "/store.Store/GetPackfiles"
	Store_PutPackfile_FullMethodName     = "/store.Store/PutPackfile"
	Store_GetPackfile_FullMethodName     = "/store.Store/GetPackfile"
	Store_GetPackfileBlob_FullMethodName = "/store.Store/GetPackfileBlob"
	Store_DeletePackfile_FullMethodName  = "/store.Store/DeletePackfile"
	Store_GetLocks_FullMethodName        = "/store.Store/GetLocks"
	Store_PutLock_FullMethodName         = "/store.Store/PutLock"
	Store_GetLock_FullMethodName         = "/store.Store/GetLock"
	Store_DeleteLock_FullMethodName      = "/store.Store/DeleteLock"
)

// StoreClient is the client API for Store service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error)
	GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error)
	GetMode(ctx context.Context, in *GetModeRequest, opts ...grpc.CallOption) (*GetModeResponse, error)
	GetSize(ctx context.Context, in *GetSizeRequest, opts ...grpc.CallOption) (*GetSizeResponse, error)
	GetStates(ctx context.Context, in *GetStatesRequest, opts ...grpc.CallOption) (*GetStatesResponse, error)
	PutState(ctx context.Context, opts ...grpc.CallOption) (Store_PutStateClient, error)
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (Store_GetStateClient, error)
	DeleteState(ctx context.Context, in *DeleteStateRequest, opts ...grpc.CallOption) (*DeleteStateResponse, error)
	GetPackfiles(ctx context.Context, in *GetPackfilesRequest, opts ...grpc.CallOption) (*GetPackfilesResponse, error)
	PutPackfile(ctx context.Context, opts ...grpc.CallOption) (Store_PutPackfileClient, error)
	GetPackfile(ctx context.Context, in *GetPackfileRequest, opts ...grpc.CallOption) (Store_GetPackfileClient, error)
	GetPackfileBlob(ctx context.Context, in *GetPackfileBlobRequest, opts ...grpc.CallOption) (Store_GetPackfileBlobClient, error)
	DeletePackfile(ctx context.Context, in *DeletePackfileRequest, opts ...grpc.CallOption) (*DeletePackfileResponse, error)
	GetLocks(ctx context.Context, in *GetLocksRequest, opts ...grpc.CallOption) (*GetLocksResponse, error)
	PutLock(ctx context.Context, opts ...grpc.CallOption) (Store_PutLockClient, error)
	GetLock(ctx context.Context, in *GetLockRequest, opts ...grpc.CallOption) (Store_GetLockClient, error)
	DeleteLock(ctx context.Context, in *DeleteLockRequest, opts ...grpc.CallOption) (*DeleteLockResponse, error)
}

type storeClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreClient(cc grpc.ClientConnInterface) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, Store_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenResponse)
	err := c.cc.Invoke(ctx, Store_Open_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseResponse)
	err := c.cc.Invoke(ctx, Store_Close_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLocationResponse)
	err := c.cc.Invoke(ctx, Store_GetLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetMode(ctx context.Context, in *GetModeRequest, opts ...grpc.CallOption) (*GetModeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModeResponse)
	err := c.cc.Invoke(ctx, Store_GetMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetSize(ctx context.Context, in *GetSizeRequest, opts ...grpc.CallOption) (*GetSizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSizeResponse)
	err := c.cc.Invoke(ctx, Store_GetSize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetStates(ctx context.Context, in *GetStatesRequest, opts ...grpc.CallOption) (*GetStatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatesResponse)
	err := c.cc.Invoke(ctx, Store_GetStates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) PutState(ctx context.Context, opts ...grpc.CallOption) (Store_PutStateClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Store_ServiceDesc.Streams[0], Store_PutState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &storePutStateClient{ClientStream: stream}
	return x, nil
}

type Store_PutStateClient interface {
	Send(*PutStateRequest) error
	CloseAndRecv() (*PutStateResponse, error)
	grpc.ClientStream
}

type storePutStateClient struct {
	grpc.ClientStream
}

func (x *storePutStateClient) Send(m *PutStateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storePutStateClient) CloseAndRecv() (*PutStateResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PutStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storeClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (Store_GetStateClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Store_ServiceDesc.Streams[1], Store_GetState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &storeGetStateClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Store_GetStateClient interface {
	Recv() (*GetStateResponse, error)
	grpc.ClientStream
}

type storeGetStateClient struct {
	grpc.ClientStream
}

func (x *storeGetStateClient) Recv() (*GetStateResponse, error) {
	m := new(GetStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storeClient) DeleteState(ctx context.Context, in *DeleteStateRequest, opts ...grpc.CallOption) (*DeleteStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStateResponse)
	err := c.cc.Invoke(ctx, Store_DeleteState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetPackfiles(ctx context.Context, in *GetPackfilesRequest, opts ...grpc.CallOption) (*GetPackfilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPackfilesResponse)
	err := c.cc.Invoke(ctx, Store_GetPackfiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) PutPackfile(ctx context.Context, opts ...grpc.CallOption) (Store_PutPackfileClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Store_ServiceDesc.Streams[2], Store_PutPackfile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &storePutPackfileClient{ClientStream: stream}
	return x, nil
}

type Store_PutPackfileClient interface {
	Send(*PutPackfileRequest) error
	CloseAndRecv() (*PutPackfileResponse, error)
	grpc.ClientStream
}

type storePutPackfileClient struct {
	grpc.ClientStream
}

func (x *storePutPackfileClient) Send(m *PutPackfileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storePutPackfileClient) CloseAndRecv() (*PutPackfileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PutPackfileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storeClient) GetPackfile(ctx context.Context, in *GetPackfileRequest, opts ...grpc.CallOption) (Store_GetPackfileClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Store_ServiceDesc.Streams[3], Store_GetPackfile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &storeGetPackfileClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Store_GetPackfileClient interface {
	Recv() (*GetPackfileResponse, error)
	grpc.ClientStream
}

type storeGetPackfileClient struct {
	grpc.ClientStream
}

func (x *storeGetPackfileClient) Recv() (*GetPackfileResponse, error) {
	m := new(GetPackfileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storeClient) GetPackfileBlob(ctx context.Context, in *GetPackfileBlobRequest, opts ...grpc.CallOption) (Store_GetPackfileBlobClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Store_ServiceDesc.Streams[4], Store_GetPackfileBlob_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &storeGetPackfileBlobClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Store_GetPackfileBlobClient interface {
	Recv() (*GetPackfileBlobResponse, error)
	grpc.ClientStream
}

type storeGetPackfileBlobClient struct {
	grpc.ClientStream
}

func (x *storeGetPackfileBlobClient) Recv() (*GetPackfileBlobResponse, error) {
	m := new(GetPackfileBlobResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storeClient) DeletePackfile(ctx context.Context, in *DeletePackfileRequest, opts ...grpc.CallOption) (*DeletePackfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePackfileResponse)
	err := c.cc.Invoke(ctx, Store_DeletePackfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetLocks(ctx context.Context, in *GetLocksRequest, opts ...grpc.CallOption) (*GetLocksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLocksResponse)
	err := c.cc.Invoke(ctx, Store_GetLocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) PutLock(ctx context.Context, opts ...grpc.CallOption) (Store_PutLockClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Store_ServiceDesc.Streams[5], Store_PutLock_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &storePutLockClient{ClientStream: stream}
	return x, nil
}

type Store_PutLockClient interface {
	Send(*PutLockRequest) error
	CloseAndRecv() (*PutLockResponse, error)
	grpc.ClientStream
}

type storePutLockClient struct {
	grpc.ClientStream
}

func (x *storePutLockClient) Send(m *PutLockRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storePutLockClient) CloseAndRecv() (*PutLockResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PutLockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storeClient) GetLock(ctx context.Context, in *GetLockRequest, opts ...grpc.CallOption) (Store_GetLockClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Store_ServiceDesc.Streams[6], Store_GetLock_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &storeGetLockClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Store_GetLockClient interface {
	Recv() (*GetLockResponse, error)
	grpc.ClientStream
}

type storeGetLockClient struct {
	grpc.ClientStream
}

func (x *storeGetLockClient) Recv() (*GetLockResponse, error) {
	m := new(GetLockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storeClient) DeleteLock(ctx context.Context, in *DeleteLockRequest, opts ...grpc.CallOption) (*DeleteLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLockResponse)
	err := c.cc.Invoke(ctx, Store_DeleteLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServer is the server API for Store service.
// All implementations must embed UnimplementedStoreServer
// for forward compatibility
type StoreServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Open(context.Context, *OpenRequest) (*OpenResponse, error)
	Close(context.Context, *CloseRequest) (*CloseResponse, error)
	GetLocation(context.Context, *GetLocationRequest) (*GetLocationResponse, error)
	GetMode(context.Context, *GetModeRequest) (*GetModeResponse, error)
	GetSize(context.Context, *GetSizeRequest) (*GetSizeResponse, error)
	GetStates(context.Context, *GetStatesRequest) (*GetStatesResponse, error)
	PutState(Store_PutStateServer) error
	GetState(*GetStateRequest, Store_GetStateServer) error
	DeleteState(context.Context, *DeleteStateRequest) (*DeleteStateResponse, error)
	GetPackfiles(context.Context, *GetPackfilesRequest) (*GetPackfilesResponse, error)
	PutPackfile(Store_PutPackfileServer) error
	GetPackfile(*GetPackfileRequest, Store_GetPackfileServer) error
	GetPackfileBlob(*GetPackfileBlobRequest, Store_GetPackfileBlobServer) error
	DeletePackfile(context.Context, *DeletePackfileRequest) (*DeletePackfileResponse, error)
	GetLocks(context.Context, *GetLocksRequest) (*GetLocksResponse, error)
	PutLock(Store_PutLockServer) error
	GetLock(*GetLockRequest, Store_GetLockServer) error
	DeleteLock(context.Context, *DeleteLockRequest) (*DeleteLockResponse, error)
	mustEmbedUnimplementedStoreServer()
}

// UnimplementedStoreServer must be embedded to have forward compatible implementations.
type UnimplementedStoreServer struct {
}

func (UnimplementedStoreServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStoreServer) Open(context.Context, *OpenRequest) (*OpenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedStoreServer) Close(context.Context, *CloseRequest) (*CloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedStoreServer) GetLocation(context.Context, *GetLocationRequest) (*GetLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocation not implemented")
}
func (UnimplementedStoreServer) GetMode(context.Context, *GetModeRequest) (*GetModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMode not implemented")
}
func (UnimplementedStoreServer) GetSize(context.Context, *GetSizeRequest) (*GetSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSize not implemented")
}
func (UnimplementedStoreServer) GetStates(context.Context, *GetStatesRequest) (*GetStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStates not implemented")
}
func (UnimplementedStoreServer) PutState(Store_PutStateServer) error {
	return status.Errorf(codes.Unimplemented, "method PutState not implemented")
}
func (UnimplementedStoreServer) GetState(*GetStateRequest, Store_GetStateServer) error {
	return status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedStoreServer) DeleteState(context.Context, *DeleteStateRequest) (*DeleteStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteState not implemented")
}
func (UnimplementedStoreServer) GetPackfiles(context.Context, *GetPackfilesRequest) (*GetPackfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackfiles not implemented")
}
func (UnimplementedStoreServer) PutPackfile(Store_PutPackfileServer) error {
	return status.Errorf(codes.Unimplemented, "method PutPackfile not implemented")
}
func (UnimplementedStoreServer) GetPackfile(*GetPackfileRequest, Store_GetPackfileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPackfile not implemented")
}
func (UnimplementedStoreServer) GetPackfileBlob(*GetPackfileBlobRequest, Store_GetPackfileBlobServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPackfileBlob not implemented")
}
func (UnimplementedStoreServer) DeletePackfile(context.Context, *DeletePackfileRequest) (*DeletePackfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePackfile not implemented")
}
func (UnimplementedStoreServer) GetLocks(context.Context, *GetLocksRequest) (*GetLocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocks not implemented")
}
func (UnimplementedStoreServer) PutLock(Store_PutLockServer) error {
	return status.Errorf(codes.Unimplemented, "method PutLock not implemented")
}
func (UnimplementedStoreServer) GetLock(*GetLockRequest, Store_GetLockServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLock not implemented")
}
func (UnimplementedStoreServer) DeleteLock(context.Context, *DeleteLockRequest) (*DeleteLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLock not implemented")
}
func (UnimplementedStoreServer) mustEmbedUnimplementedStoreServer() {}

// UnsafeStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServer will
// result in compilation errors.
type UnsafeStoreServer interface {
	mustEmbedUnimplementedStoreServer()
}

func RegisterStoreServer(s grpc.ServiceRegistrar, srv StoreServer) {
	s.RegisterService(&Store_ServiceDesc, srv)
}

func _Store_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_Open_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Open(ctx, req.(*OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_GetLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetLocation(ctx, req.(*GetLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_GetMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetMode(ctx, req.(*GetModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_GetSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetSize(ctx, req.(*GetSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_GetStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetStates(ctx, req.(*GetStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_PutState_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StoreServer).PutState(&storePutStateServer{ServerStream: stream})
}

type Store_PutStateServer interface {
	SendAndClose(*PutStateResponse) error
	Recv() (*PutStateRequest, error)
	grpc.ServerStream
}

type storePutStateServer struct {
	grpc.ServerStream
}

func (x *storePutStateServer) SendAndClose(m *PutStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storePutStateServer) Recv() (*PutStateRequest, error) {
	m := new(PutStateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Store_GetState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StoreServer).GetState(m, &storeGetStateServer{ServerStream: stream})
}

type Store_GetStateServer interface {
	Send(*GetStateResponse) error
	grpc.ServerStream
}

type storeGetStateServer struct {
	grpc.ServerStream
}

func (x *storeGetStateServer) Send(m *GetStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Store_DeleteState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).DeleteState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_DeleteState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).DeleteState(ctx, req.(*DeleteStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetPackfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetPackfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_GetPackfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetPackfiles(ctx, req.(*GetPackfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_PutPackfile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StoreServer).PutPackfile(&storePutPackfileServer{ServerStream: stream})
}

type Store_PutPackfileServer interface {
	SendAndClose(*PutPackfileResponse) error
	Recv() (*PutPackfileRequest, error)
	grpc.ServerStream
}

type storePutPackfileServer struct {
	grpc.ServerStream
}

func (x *storePutPackfileServer) SendAndClose(m *PutPackfileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storePutPackfileServer) Recv() (*PutPackfileRequest, error) {
	m := new(PutPackfileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Store_GetPackfile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPackfileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StoreServer).GetPackfile(m, &storeGetPackfileServer{ServerStream: stream})
}

type Store_GetPackfileServer interface {
	Send(*GetPackfileResponse) error
	grpc.ServerStream
}

type storeGetPackfileServer struct {
	grpc.ServerStream
}

func (x *storeGetPackfileServer) Send(m *GetPackfileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Store_GetPackfileBlob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPackfileBlobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StoreServer).GetPackfileBlob(m, &storeGetPackfileBlobServer{ServerStream: stream})
}

type Store_GetPackfileBlobServer interface {
	Send(*GetPackfileBlobResponse) error
	grpc.ServerStream
}

type storeGetPackfileBlobServer struct {
	grpc.ServerStream
}

func (x *storeGetPackfileBlobServer) Send(m *GetPackfileBlobResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Store_DeletePackfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePackfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).DeletePackfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_DeletePackfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).DeletePackfile(ctx, req.(*DeletePackfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetLocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetLocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_GetLocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetLocks(ctx, req.(*GetLocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_PutLock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StoreServer).PutLock(&storePutLockServer{ServerStream: stream})
}

type Store_PutLockServer interface {
	SendAndClose(*PutLockResponse) error
	Recv() (*PutLockRequest, error)
	grpc.ServerStream
}

type storePutLockServer struct {
	grpc.ServerStream
}

func (x *storePutLockServer) SendAndClose(m *PutLockResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storePutLockServer) Recv() (*PutLockRequest, error) {
	m := new(PutLockRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Store_GetLock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StoreServer).GetLock(m, &storeGetLockServer{ServerStream: stream})
}

type Store_GetLockServer interface {
	Send(*GetLockResponse) error
	grpc.ServerStream
}

type storeGetLockServer struct {
	grpc.ServerStream
}

func (x *storeGetLockServer) Send(m *GetLockResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Store_DeleteLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).DeleteLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_DeleteLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).DeleteLock(ctx, req.(*DeleteLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Store_ServiceDesc is the grpc.ServiceDesc for Store service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Store_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "store.Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Store_Create_Handler,
		},
		{
			MethodName: "Open",
			Handler:    _Store_Open_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Store_Close_Handler,
		},
		{
			MethodName: "GetLocation",
			Handler:    _Store_GetLocation_Handler,
		},
		{
			MethodName: "GetMode",
			Handler:    _Store_GetMode_Handler,
		},
		{
			MethodName: "GetSize",
			Handler:    _Store_GetSize_Handler,
		},
		{
			MethodName: "GetStates",
			Handler:    _Store_GetStates_Handler,
		},
		{
			MethodName: "DeleteState",
			Handler:    _Store_DeleteState_Handler,
		},
		{
			MethodName: "GetPackfiles",
			Handler:    _Store_GetPackfiles_Handler,
		},
		{
			MethodName: "DeletePackfile",
			Handler:    _Store_DeletePackfile_Handler,
		},
		{
			MethodName: "GetLocks",
			Handler:    _Store_GetLocks_Handler,
		},
		{
			MethodName: "DeleteLock",
			Handler:    _Store_DeleteLock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutState",
			Handler:       _Store_PutState_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetState",
			Handler:       _Store_GetState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutPackfile",
			Handler:       _Store_PutPackfile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetPackfile",
			Handler:       _Store_GetPackfile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPackfileBlob",
			Handler:       _Store_GetPackfileBlob_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutLock",
			Handler:       _Store_PutLock_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetLock",
			Handler:       _Store_GetLock_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "store.proto",
}
